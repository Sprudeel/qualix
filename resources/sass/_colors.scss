$allColors:(
    "blue": $blue,
    "indigo": $indigo,
    "purple": $purple,
    "pink": $pink,
    "red": $red,
    "orange": $orange,
    "yellow": $yellow,
    "green": $green,
    "teal": $teal,
    "cyan": $cyan,
    "blue-light": $blue-light,
    "indigo-light": $indigo-light,
    "purple-light": $purple-light,
    "pink-light": $pink-light,
    "red-light": $red-light,
    "orange-light": $orange-light,
    "yellow-light": $yellow-light,
    "green-light": $green-light,
    "teal-light": $teal-light,
    "cyan-light": $cyan-light,
    "white": $white,
    "gray-100": $gray-100,
    "gray-200": $gray-200,
    "gray-300": $gray-300,
    "gray-400": $gray-400,
    "gray-500": $gray-500,
    "gray-600": $gray-600,
    "gray-700": $gray-700,
    "gray-800": $gray-800,
    "gray-900": $gray-900,
    "black": $black,
);

@use "sass:math";

@function luminance($color) {
    $colors: (
        'red': red($color),
        'green': green($color),
        'blue': blue($color)
    );

    @each $name, $value in $colors {
        $adjusted: 0;
        $value: math.div($value, 255);

        @if $value < 0.03928 {
            $value: math.div($value, 12.92);
        } @else {
            $value: math.div($value + .055, 1.055);
            $value: pow($value, 2.4);
        }

        $colors: map-merge($colors, ($name: $value));
    }

    @return (map-get($colors, 'red') * .2126) + (map-get($colors, 'green') * .7152) + (map-get($colors, 'blue') * .0722);
}

@function pow($number, $exponent) {
    @if (round($exponent) != $exponent) {
        @return exp($exponent * ln($number));
    }

    $value: 1;

    @if $exponent > 0 {
        @for $i from 1 through $exponent {
            $value: $value * $number;
        }
    } @else if $exponent < 0 {
        @for $i from 1 through -$exponent {
            $value: $value / $number;
        }
    }

    @return $value;
}

@function factorial($value) {
    $result: 1;

    @if $value == 0 {
        @return $result;
    }

    @for $index from 1 through $value {
        $result: $result * $index;
    }

    @return $result;
}

@function summation($iteratee, $input, $initial: 0, $limit: 100) {
    $sum: 0;

    @for $index from $initial to $limit {
        $sum: $sum + call(get-function($iteratee), $input, $index);
    }

    @return $sum;
}

@function exp-maclaurin($x, $n) {
    @return math.div(pow($x, $n), factorial($n));
}

@function exp($value) {
    @return summation(exp-maclaurin, $value, 0, 100);
}

@function ln-maclaurin($x, $n) {
    @return math.div(pow(-1, $n + 1), $n) * (pow($x - 1, $n));
}

@function ln($value) {
    $ten-exp: 1;
    $ln-ten: 2.30258509;

    @while ($value > pow(10, $ten-exp)) {
        $ten-exp: $ten-exp + 1;
    }

    @return summation(ln-maclaurin, math.div($value, pow(10, $ten-exp)), 1, 100) + $ten-exp * $ln-ten;
}

@each $colorName, $value in $allColors {
    .bg-#{$colorName} {
        background-color: #{$value} !important;
    }
    .text-#{$colorName} {
        color: #{$value} !important;
    }
    .progress-bar.bg-#{$colorName}, .text-auto.bg-#{$colorName} {
        @if (luminance($value) > 0.51) {
            color: #000 !important;
        } @else {
            color: #fff !important;
        }
    }
    .bg-#{$colorName}-hover:hover {
        background-color: #{$value} !important;
    }
    .bg-auto-hover.text-#{$colorName}-hover:hover {
        @if (luminance($value) > 0.51) {
            background-color: #000 !important;
        } @else {
            background-color: #fff !important;
        }
    }
    .text-#{$colorName}-hover:hover {
        color: #{$value} !important;
    }
}
